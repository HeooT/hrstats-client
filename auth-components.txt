// client/src/pages/Auth/LoginForm.js
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { toast } from 'react-toastify';
import axios from 'axios';

// 공통 컴포넌트
import Input from '../../components/common/Input';
import Button from '../../components/common/Button';
import Card from '../../components/common/Card';

const LoginForm = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  
  // Formik 설정
  const formik = useFormik({
    initialValues: {
      email: '',
      password: ''
    },
    validationSchema: Yup.object({
      email: Yup.string()
        .email('유효한 이메일 주소를 입력하세요')
        .required('이메일을 입력하세요'),
      password: Yup.string()
        .required('비밀번호를 입력하세요')
    }),
    onSubmit: async (values) => {
      setLoading(true);
      
      try {
        const response = await axios.post('/api/auth/login', values);
        
        if (response.data.token) {
          // 토큰을 로컬 스토리지에 저장
          localStorage.setItem('token', response.data.token);
          
          toast.success('로그인 성공!');
          
          // 기업 정보가 있는지 확인하여 리다이렉트
          try {
            const companyResponse = await axios.get('/api/company', {
              headers: { 'x-auth-token': response.data.token }
            });
            
            if (companyResponse.data) {
              // 기업 정보가 있으면 진단 유형 선택 페이지로 이동
              navigate('/diagnosis-type');
            } else {
              // 기업 정보가 없으면 기업 정보 입력 페이지로 이동
              navigate('/company-info');
            }
          } catch (error) {
            // 기업 정보 조회 실패 시, 기업 정보 입력 페이지로 이동
            navigate('/company-info');
          }
        }
      } catch (error) {
        console.error('로그인 실패:', error);
        toast.error(error.response?.data?.msg || '로그인에 실패했습니다');
      } finally {
        setLoading(false);
      }
    }
  });
  
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
            HR Stats
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            AI 기반 중소기업 HR 데이터 진단 및 전략 추천 솔루션
          </p>
        </div>
        
        <Card>
          <form className="space-y-6" onSubmit={formik.handleSubmit}>
            <Input
              label="이메일"
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              value={formik.values.email}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              error={formik.touched.email && formik.errors.email}
            />
            
            <Input
              label="비밀번호"
              id="password"
              name="password"
              type="password"
              autoComplete="current-password"
              required
              value={formik.values.password}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              error={formik.touched.password && formik.errors.password}
            />
            
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-900">
                  로그인 상태 유지
                </label>
              </div>
              
              <div className="text-sm">
                <a href="#" className="font-medium text-blue-600 hover:text-blue-500">
                  비밀번호를 잊으셨나요?
                </a>
              </div>
            </div>
            
            <Button
              type="submit"
              variant="primary"
              fullWidth
              disabled={loading}
            >
              {loading ? '로그인 중...' : '로그인'}
            </Button>
            
            <div className="text-center">
              <p className="text-sm text-gray-600">
                계정이 없으신가요?{' '}
                <Link to="/register" className="font-medium text-blue-600 hover:text-blue-500">
                  회원가입
                </Link>
              </p>
            </div>
          </form>
        </Card>
        
        <div className="text-center mt-4">
          <p className="text-xs text-gray-500">
            &copy; {new Date().getFullYear()} 인사이트 컨설팅. All rights reserved.
          </p>
        </div>
      </div>
    </div>
  );
};

export default LoginForm;

// client/src/pages/Auth/RegisterForm.js
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import { toast } from 'react-toastify';
import axios from 'axios';

// 공통 컴포넌트
import Input from '../../components/common/Input';
import Button from '../../components/common/Button';
import Card from '../../components/common/Card';

const RegisterForm = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  
  // Formik 설정
  const formik = useFormik({
    initialValues: {
      name: '',
      email: '',
      password: '',
      confirmPassword: ''
    },
    validationSchema: Yup.object({
      name: Yup.string()
        .required('이름을 입력하세요'),
      email: Yup.string()
        .email('유효한 이메일 주소를 입력하세요')
        .required('이메일을 입력하세요'),
      password: Yup.string()
        .min(6, '비밀번호는 최소 6자 이상이어야 합니다')
        .required('비밀번호를 입력하세요'),
      confirmPassword: Yup.string()
        .oneOf([Yup.ref('password'), null], '비밀번호가 일치하지 않습니다')
        .required('비밀번호 확인을 입력하세요')
    }),
    onSubmit: async (values) => {
      setLoading(true);
      
      try {
        const response = await axios.post('/api/auth/register', {
          name: values.name,
          email: values.email,
          password: values.password
        });
        
        if (response.data.token) {
          // 토큰을 로컬 스토리지에 저장
          localStorage.setItem('token', response.data.token);
          
          toast.success('회원가입 성공!');
          
          // 기업 정보 입력 페이지로 이동
          navigate('/company-info');
        }
      } catch (error) {
        console.error('회원가입 실패:', error);
        toast.error(error.response?.data?.msg || '회원가입에 실패했습니다');
      } finally {
        setLoading(false);
      }
    }
  });
  
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
            HR Stats
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            AI 기반 중소기업 HR 데이터 진단 및 전략 추천 솔루션
          </p>
        </div>
        
        <Card>
          <form className="space-y-6" onSubmit={formik.handleSubmit}>
            <Input
              label="이름"
              id="name"
              name="name"
              type="text"
              autoComplete="name"
              required
              value={formik.values.name}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              error={formik.touched.name && formik.errors.name}
            />
            
            <Input
              label="이메일"
              id="email"
              name="email"
              type="email"
              autoComplete="email"
              required
              value={formik.values.email}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              error={formik.touched.email && formik.errors.email}
            />
            
            <Input
              label="비밀번호"
              id="password"
              name="password"
              type="password"
              autoComplete="new-password"
              required
              value={formik.values.password}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              error={formik.touched.password && formik.errors.password}
            />
            
            <Input
              label="비밀번호 확인"
              id="confirmPassword"
              name="confirmPassword"
              type="password"
              autoComplete="new-password"
              required
              value={formik.values.confirmPassword}
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              error={formik.touched.confirmPassword && formik.errors.confirmPassword}
            />
            
            <Button
              type="submit"
              variant="primary"
              fullWidth
              disabled={loading}
            >
              {loading ? '회원가입 중...' : '회원가입'}
            </Button>
            
            <div className="text-center">
              <p className="text-sm text-gray-600">
                이미 계정이 있으신가요?{' '}
                <Link to="/login" className="font-medium text-blue-600 hover:text-blue-500">
                  로그인
                </Link>
              </p>
            </div>
          </form>
        </Card>
        
        <div className="text-center mt-4">
          <p className="text-xs text-gray-500">
            &copy; {new Date().getFullYear()} 인사이트 컨설팅. All rights reserved.
          </p>
        </div>
      </div>
    </div>
  );
};

export default RegisterForm;